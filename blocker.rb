require 'open3'

# Script for blocking malicious IPs using GCP compute firewall
class Blocker
  attr_accessor :key_file, :project, :description, :priority
  attr_accessor :base_name, :time_stamp, :rule_name, :source_urls

  BASE_NAME = 'gcp-ip-blocker'.freeze
  DESCRIPTION = 'Auto-generated by gcp-ip-blocker'.freeze
  REQUIRED_ENVS = %w[
    SOURCE_URLS
    KEY_FILE
    PROJECT
  ].freeze

  def initialize
    check_required_envs
    set_instance_vars
    gcloud_auth
    gcloud_set_project
  end

  def run
    batch_create_firewall_rules
    handle_previous_firewall_rules
    puts "#{ip_pool.size} IP ranges were blocked"
  end

  private

  def handle_previous_firewall_rules
    old_rules = list_firewall_rule(rule_name)
    unless old_rules.empty?
      puts 'Deleting other firewall rules created by gcp-ip-blocker'
      delete_firewall_rule(old_rules)
      puts 'All other firewall rules created by gcp-ip-blocker deleted'
    end
    true
  end

  def set_instance_vars
    self.key_file = ENV['KEY_FILE']
    self.project = ENV['PROJECT']
    self.priority = ENV['PRIORITY'] || 1000
    self.description = DESCRIPTION
    self.source_urls = ENV['SOURCE_URLS'].split
    self.base_name = BASE_NAME
    self.time_stamp = Time.now.strftime('%s')
    self.rule_name = %(#{base_name}-#{time_stamp})
  end

  def rule_name_with_index(index)
    %(#{rule_name}-#{format('%02d', index)})
  end

  def check_required_envs
    REQUIRED_ENVS.each do |env|
      check_env(env)
    end
    true
  end

  def check_env(env)
    ENV[env] || abort("Environment variable #{env} is required")
    true
  end

  def gcloud_auth
    cmd = %(gcloud auth activate-service-account --key-file="#{key_file}")
    stdout, stderr, s = ::Open3.capture3(cmd)
    s.success? || abort("Fail to do gcloud auth:\n#{stdout}\n#{stderr}")
  end

  def gcloud_set_project
    cmd = %(gcloud config set project "#{project}")
    stdout, stderr, s = ::Open3.capture3(cmd)
    s.success? || abort("Fail to set gcloud project:\n#{stdout}\n#{stderr}")
  end

  def ip_pool
    return @ip_pool if @ip_pool

    @ip_pool = []
    source_urls.each do |url|
      cmd = %(curl -sS --compressed "#{url}" | grep -v "#")
      stdout, stderr, s = ::Open3.capture3(cmd)
      s.success? || abort("Fail to get malicious IPs:\n#{stdout}\n#{stderr}")
      @ip_pool += stdout.split
    end
    @ip_pool
  end

  def create_cmd(name, ips)
    base = %(gcloud compute firewall-rules create "#{name}" )
    options = [
      '--action=DENY',
      '--rules=all',
      '--direction=INGRESS',
      %(--source-ranges="#{ips.join(',')}"),
      %(--description="#{description}"),
      %(--priority="#{priority}")
    ]
    base + options.join(' ')
  end

  def batch_create_firewall_rules
    puts 'Creating new firewall rules'
    threads = []
    ip_pool.each_slice(256).with_index do |ips, index|
      threads << Thread.new do
        create_firewall_rule(rule_name_with_index(index), ips)
      end
    end
    puts 'Waiting for requests to finish'
    threads.each(&:join)
    puts 'All new firewall rules created'
  end

  def create_firewall_rule(name, ips)
    stdout, stderr, s = ::Open3.capture3(create_cmd(name, ips))
    s.success? || abort("Fail to create firewall rule:\n#{stdout}\n#{stderr}")
  end

  def list_firewall_rule(name)
    base = %(gcloud compute firewall-rules list )
    filter_str = %(description~'#{description}' AND NOT name~'#{name}')
    options = %w[
      --format="value(name)"
    ] + [%(--filter="#{filter_str}")]
    cmd = base + options.join(' ')
    stdout, stderr, s = ::Open3.capture3(cmd)
    s.success? || abort("Fail to list firewall rule:\n#{stdout}\n#{stderr}")
    stdout.split
  end

  def delete_firewall_rule(names)
    base = %(gcloud compute firewall-rules delete )
    cmd = base + names.join(' ')
    stdout, stderr, s = ::Open3.capture3(cmd)
    s.success? || abort("Fail to delete firewall rule:\n#{stdout}\n#{stderr}")
  end
end

Blocker.new.run
