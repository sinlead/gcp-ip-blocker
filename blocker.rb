require 'net/http'
require 'googleauth'
require 'google/apis/compute_v1'

# Script for blocking malicious IPs using GCP compute firewall
class Blocker
  attr_accessor :key_file, :project, :description, :priority, :service
  attr_accessor :base_name, :time_stamp, :rule_name, :source_urls

  BASE_NAME = 'gcp-ip-blocker'.freeze
  DESCRIPTION = 'Auto-generated by gcp-ip-blocker'.freeze
  REQUIRED_ENVS = %w[
    SOURCE_URLS
    KEY_FILE
    PROJECT
  ].freeze

  def initialize
    check_required_envs
    set_instance_vars
    create_gcp_service
  end

  def run
    batch_create_firewall_rules
    handle_previous_firewall_rules
    puts "#{ip_pool.size} IP ranges were blocked"
  end

  private

  def handle_previous_firewall_rules
    old_rules = list_firewall_rule(rule_name)
    unless old_rules.empty?
      puts 'Deleting other firewall rules created by gcp-ip-blocker'
      batch_delete_firewall_rule(old_rules)
      puts 'All other firewall rules created by gcp-ip-blocker deleted'
    end
    true
  end

  def set_instance_vars
    self.key_file = ENV['KEY_FILE']
    self.project = ENV['PROJECT']
    self.priority = ENV['PRIORITY'] || 1000
    self.description = DESCRIPTION
    self.source_urls = ENV['SOURCE_URLS'].split
    self.base_name = BASE_NAME
    self.time_stamp = Time.now.strftime('%s')
    self.rule_name = %(#{base_name}-#{time_stamp})
  end

  def rule_name_with_index(index)
    %(#{rule_name}-#{format('%02d', index)})
  end

  def check_required_envs
    REQUIRED_ENVS.each do |env|
      check_env(env)
    end
    true
  end

  def check_env(env)
    ENV[env] || abort("Environment variable #{env} is required")
    true
  end

  def create_gcp_service
    self.service = Google::Apis::ComputeV1::ComputeService.new
    scope = 'https://www.googleapis.com/auth/compute'
    service.authorization = Google::Auth::ServiceAccountCredentials.make_creds(
      json_key_io: File.open(key_file),
      scope: scope
    )
  end

  def ip_pool
    @ip_pool ||= source_urls.map do |url|
      Net::HTTP.get(URI(url)).split("\n").grep_v(/#/)
    end.reduce(:+)
  end

  def batch_create_firewall_rules
    puts 'Creating new firewall rules'
    service.batch do |service|
      ip_pool.each_slice(256).with_index do |ips, index|
        rule = firewall_rule_obj(ips, index)
        service.insert_firewall(project, rule) do |_, err|
          abort(err.to_s) if err
        end
      end
    end
    puts 'All new firewall rules created'
  end

  def firewall_rule_obj(ips, index)
    Google::Apis::ComputeV1::Firewall.new(
      name: rule_name_with_index(index),
      description: description,
      priority: priority,
      source_ranges: ips,
      direction: 'INGRESS',
      denied: [{ ip_protocol: 'all' }]
    )
  end

  def list_firewall_rule(name)
    rules = service.fetch_all do |token|
      service.list_firewalls(project, page_token: token)
    end

    rules.select do |rule|
      rule.description =~ /#{description}/ && rule.name !~ /#{name}/
    end.map(&:name)
  end

  def batch_delete_firewall_rule(names)
    service.batch do |service|
      names.each do |name|
        service.delete_firewall(project, name) do |_, err|
          abort(err.to_s) if err
        end
      end
    end
  end
end

Blocker.new.run
